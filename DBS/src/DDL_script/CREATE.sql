 CREATE TABLE Purchaser(
    purchaser_id	NUMBER,
    first_name	VARCHAR(100) NOT NULL,
    last_name	VARCHAR(100) NOT NULL,
    email_address	VARCHAR(100) NOT NULL,
    PRIMARY KEY(purchaser_id)   
);

CREATE SEQUENCE seq_purchaser_id 
    START WITH 1 
    INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trig_purchaser
BEFORE INSERT ON Purchaser
FOR EACH ROW
    BEGIN 
    IF inserting THEN
      IF :NEW.purchaser_id IS NULL THEN 
        SELECT  seq_purchaser_id.NEXTVAL 
        INTO    :NEW.purchaser_id 
        FROM    dual;
      END IF;
    END IF;
END;

CREATE TABLE Login(
 	purchaser_id	NUMBER REFERENCES Purchaser(purchaser_id) ON DELETE CASCADE,
	login_number	NUMBER,
	login_username  VARCHAR(100) NOT NULL,
    login_password  VARCHAR(50) NOT NULL,
    PRIMARY KEY(purchaser_id, login_number),
    CHECK(LENGTH(login_password) >= 8)
);

CREATE TABLE Creator(
    purchaser_id     	NUMBER REFERENCES Purchaser(purchaser_id) ON DELETE CASCADE,
    content	VARCHAR(10) NOT NULL,
    username  VARCHAR(100) NOT NULL,
    start_date     	DATE,
   	PRIMARY KEY(purchaser_id)
);

CREATE TABLE Employee(
    employee_id	NUMBER,
    first_name	VARCHAR(100) NOT NULL,
    last_name	VARCHAR(100) NOT NULL,
    email_address	VARCHAR(100) NOT NULL,
    phone_number	VARCHAR(100) NOT NULL,
   	supervisor_id	NUMBER,
    PRIMARY KEY(employee_id) 
);

CREATE SEQUENCE seq_employee_id 
    START WITH 1 
    INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trig_employee
BEFORE INSERT ON Employee
FOR EACH ROW
    BEGIN 
    IF inserting THEN
      IF :NEW.employee_id IS NULL THEN 
        SELECT  seq_employee_id.NEXTVAL 
        INTO    :NEW.employee_id 
        FROM    dual;
      END IF;
    END IF;
END;

CREATE OR REPLACE TRIGGER check_supervisor_insert
BEFORE INSERT OR UPDATE ON Employee
FOR EACH ROW 
WHEN (NEW.supervisor_id IS NOT NULL)
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
    supervisor_is_supervised EXCEPTION;
    supervisor_count NUMBER;
BEGIN 
    SELECT COUNT(*)
        INTO supervisor_count
        FROM Employee e
        WHERE e.employee_id = :NEW.supervisor_id
            AND e.supervisor_id IS NOT NULL;

    IF (supervisor_count > 0) THEN
        RAISE supervisor_is_supervised;
    END IF;
END;

ALTER TABLE Employee
ADD CONSTRAINT employee_fk FOREIGN KEY(employee_id) REFERENCES Employee(employee_id)
	ON DELETE SET NULL;

CREATE TABLE Item(
	item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1,
	price VARCHAR(50) NOT NULL,
	max_uploadsize NUMBER(5) NOT NULL,
	upload_date	DATE,
	creator_id NUMBER REFERENCES Creator(purchaser_id) ON DELETE CASCADE,
	employee_id NUMBER REFERENCES Employee(employee_id) ON DELETE CASCADE,
	PRIMARY KEY(item_id),
	CHECK(price > 0),
	CHECK(max_uploadsize > 0)
);

CREATE TABLE Buys(
    buys_id     NUMBER GENERATED BY DEFAULT AS IDENTITY,
	purchaser_id NUMBER REFERENCES Purchaser(purchaser_id) ON DELETE CASCADE,
    item_id	NUMBER REFERENCES Item(item_id) ON DELETE CASCADE,
    payment_method	VARCHAR(50) NOT NULL,
    license	VARCHAR(20),
    purchase_date	DATE NOT NULL,
    PRIMARY KEY(buys_id)
);
   
CREATE TABLE Photo(
	photo_id	PRIMARY KEY REFERENCES Item(item_id) ON DELETE CASCADE,
	photo_dimension VARCHAR(10) NOT NULL,
	name VARCHAR(100),
	camera_model VARCHAR(50),
	CHECK(LENGTH(photo_dimension) > 0)
);

CREATE TABLE Art(
	art_id	PRIMARY KEY REFERENCES Item(item_id) ON DELETE CASCADE,
	art_dimension VARCHAR(10) NOT NULL,
	name VARCHAR(100),
	art_type VARCHAR(50),
	CHECK(LENGTH(art_dimension) > 0)
);
   
--Max price of an Item
CREATE VIEW MaxPriceItem AS
SELECT MAX(item.price) AS max_price
FROM Item item;

--list how many creators do this content, only including contents with more than 3 creators
CREATE VIEW FilterByContent AS
SELECT content, Count(*) AS numberOfContent
FROM Creator
GROUP BY content
HAVING Count(*) >= 3;

--every Purchaser which is a Creator as well
CREATE VIEW PurchaserThatIsCreator AS
SELECT Purchaser.purchaser_id, Creator.username
FROM Purchaser
INNER JOIN Creator ON Purchaser.purchaser_id = Creator.purchaser_id;
   
--Stored Procedure--
CREATE OR REPLACE PROCEDURE CreatorStats(
i_purchaser_id IN BUYS.PURCHASER_ID%TYPE,
o_count OUT NUMBER,
o_sales OUT NUMBER)
AS 
BEGIN
    SELECT 
       COUNT(*),
       sum(i.price)  + COUNT(
        CASE b.license
          WHEN 'commercial' THEN
            1
          ELSE
            NULL
          END
    ) * 30
    INTO o_count, o_sales
    FROM buys b
    NATURAL JOIN item i
    WHERE i.creator_id = i_purchaser_id;
END;

select * from USER_ERRORS 
 where NAME = upper('CreatorStats')
   and TYPE = 'PROCEDURE';
